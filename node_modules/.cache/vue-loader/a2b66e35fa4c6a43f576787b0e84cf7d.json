{"remainingRequest":"D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\src\\components\\form.vue?vue&type=template&id=230f5a58&","dependencies":[{"path":"D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\src\\components\\form.vue","mtime":1607255961986},{"path":"D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Html, Css\\тестовое задание веб-студия Регул\\form\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}